name: CodePromptus CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write 

jobs:
  test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        # os: [ubuntu-latest]
    env:
      CI: true

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
              
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x'
        
    - name: Display .NET information
      run: dotnet --info
        
    - name: Install requirements for Avalonia (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        bash .github/scripts/install-avalonia-deps.sh
    
    - name: Restore dependencies
      run: dotnet restore CodePromptus.sln
      
    - name: Build
      run: dotnet build CodePromptus.sln --configuration Release --no-restore
      
    - name: Test
      run: dotnet test CodePromptus.sln --configuration Release --no-build --verbosity normal
            
    - name: Upload test screenshots and logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-screenshots-and-logs-${{ matrix.os }}
        path: |
          **/TestResults/**
          **/logs/**
        if-no-files-found: warn

  publish:
    name: Publish and Package Artifacts
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
            9.0.x

    - name: Install requirements for Avalonia
      run: bash .github/scripts/install-avalonia-deps.sh

    - name: Get version from csproj
      id: version
      run: |
        VERSION=$(sed -n 's/.*<Version>\([^<]*\)<\/Version>.*/\1/p' App/CodePromptus.App.csproj)
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Found version: $VERSION"

    - name: Restore and build solution for license generation
      run: |
        dotnet restore CodePromptus.sln
        dotnet build CodePromptus.sln --configuration Release

    - name: Generate third-party license files
      run: |
        dotnet tool install --global nuget-license
        # Ignore non-zero exit codes from nuget-license, as these typically indicate warnings rather than critical errors.
        nuget-license --input App/CodePromptus.App.csproj --output JsonPretty --file-output Tools/ThirdPartyLicenses/Auto.json || true
        nuget-license --input App/CodePromptus.App.csproj --license-information-download-location Tools/ThirdPartyLicenses/Auto || true
        dotnet build Tools/ThirdPartyLicenseGenerator/ThirdPartyLicenseGenerator.csproj --configuration Release
        dotnet run --project Tools/ThirdPartyLicenseGenerator --configuration Release -- Tools/ThirdPartyLicenses .

    - name: Publish and Zip All Platforms
      run: |
        for RID in win-x64 osx-x64 linux-x64; do
          echo "Publishing for $RID"
          dotnet publish App/CodePromptus.App.csproj -c Release -r $RID --self-contained true -p:PublishSingleFile=true -o publish-$RID
          cp ThirdPartyLicenses.txt publish-$RID/
          echo "Zipping build for $RID"
          cd publish-$RID
          zip -r ../CodePromptus-v${{ steps.version.outputs.version }}-$RID.zip .
          cd ..
        done

    - name: Create Release and Upload Artifacts
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: v${{ steps.version.outputs.version }}
        files: |
          CodePromptus-v${{ steps.version.outputs.version }}-win-x64.zip
          CodePromptus-v${{ steps.version.outputs.version }}-osx-x64.zip
          CodePromptus-v${{ steps.version.outputs.version }}-linux-x64.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}